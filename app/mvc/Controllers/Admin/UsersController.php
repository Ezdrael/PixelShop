<?php
// ===================================================================
// –§–∞–π–ª: mvc/c_users.php üï∞Ô∏è
// –†–æ–∑–º—ñ—â–µ–Ω–Ω—è: /mvc/c_users.php
// ===================================================================
namespace App\Mvc\Controllers\Admin;

use App\Mvc\Models\Roles; 
use App\Mvc\Models\Users;

class UsersController  extends BaseController {

    protected $mUsers;
    protected $mRoles;

    public function __construct($params) {
        parent::__construct($params);
        $this->mUsers = new Users();
        $this->mRoles = new Roles();
    }

    public function indexAction() {
        if (!$this->hasPermission('users', 'v')) {
            return $this->showAccessDenied();
        }
        $this->title = '–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏';
        $users = $this->mUsers->getAll();
        $this->render('v_users_list', ['users' => $users]);
    }

    public function watchAction() {
        if (!$this->hasPermission('users', 'v')) {
            return $this->showAccessDenied();
        }
        $id = $this->params['id'] ?? 0;
        $user = $this->mUsers->getById((int)$id);
        $this->title = $user ? '–ü—Ä–æ—Ñ—ñ–ª—å: ' . $user['name'] : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
        $this->render('v_user_single', ['user' => $user]);
    }

    public function editAction() {
        if (!$this->hasPermission('users', 'e')) {
            return $this->showAccessDenied();
        }

        $id = (int)($this->params['id'] ?? 0);
        $redirectUrl = BASE_URL . '/users/edit/' . $id;

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
                die('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ CSRF —Ç–æ–∫–µ–Ω!');
            }

            $data = [
                'name' => trim($_POST['name'] ?? ''),
                'email' => trim($_POST['email'] ?? ''),
                'role_id' => (int)($_POST['role_id'] ?? 0),
                'avatar_url' => filter_var(trim($_POST['avatar_url'] ?? ''), FILTER_VALIDATE_URL) ? trim($_POST['avatar_url']) : '' // –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
            ];

            $password = $_POST['password'] ?? '';
            $password_confirm = $_POST['password_confirm'] ?? '';

            if (!empty($password)) {
                if ($password !== $password_confirm) {
                    $_SESSION['flash_message'] = ['type' => 'error', 'text' => '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å.'];
                    header('Location: ' . $redirectUrl);
                    exit();
                }
                $data['password'] = $password;
            }

            if (!empty($data['name']) && filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
                if ($this->mUsers->emailExists($data['email'], $id)) {
                    $_SESSION['flash_message'] = ['type' => 'error', 'text' => '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.'];
                } else {
                    if ($this->mUsers->update($id, $data)) {
                        $_SESSION['flash_message'] = ['type' => 'success', 'text' => '–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.'];
                    } else {
                        $_SESSION['flash_message'] = ['type' => 'error', 'text' => '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.'];
                    }
                }
            } else {
                $_SESSION['flash_message'] = ['type' => 'error', 'text' => '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–æ–ª—è "–Ü–º\'—è" —Ç–∞ "Email" –∫–æ—Ä–µ–∫—Ç–Ω–æ.'];
            }

            header('Location: ' . $redirectUrl);
            exit();
        }

        $user = $this->mUsers->getById($id);
        $roles = $this->mRoles->getAll();
        $this->title = '–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞';
        $this->render('v_user_edit', ['user' => $user, 'roles' => $roles]);
    }

    public function addAction() {
        if (!$this->hasPermission('users', 'a')) {
            return $this->showAccessDenied();
        }

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
                die('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ CSRF —Ç–æ–∫–µ–Ω!');
            }
            $data = [
                'name' => trim($_POST['name'] ?? ''),
                'email' => trim($_POST['email'] ?? ''),
                'password' => $_POST['password'] ?? '',
                'role_id' => (int)($_POST['role_id'] ?? 0),
                'avatar_url' => filter_var(trim($_POST['avatar_url'] ?? ''), FILTER_VALIDATE_URL) ? trim($_POST['avatar_url']) : '' // –í–∞–ª—ñ–¥–∞—Ü—ñ—è URL
            ];

            if (!empty($data['name']) && filter_var($data['email'], FILTER_VALIDATE_EMAIL) && !empty($data['password']) && $data['role_id'] > 0) {
                if ($this->mUsers->emailExists($data['email'])) {
                    $_SESSION['flash_message'] = ['type' => 'error', 'text' => '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.'];
                } else {
                    if ($this->mUsers->add($data)) {
                        $_SESSION['flash_message'] = ['type' => 'success', 'text' => '–ù–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.'];
                        header('Location: ' . BASE_URL . '/users');
                        exit();
                    } else {
                        $_SESSION['flash_message'] = ['type' => 'error', 'text' => '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.'];
                    }
                }
            } else {
                $_SESSION['flash_message'] = ['type' => 'error', 'text' => '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.'];
            }
            header('Location: ' . BASE_URL . '/users/add');
            exit();
        }

        $this->title = '–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞';
        $roles = $this->mRoles->getAll();
        $this->render('v_user_add', ['roles' => $roles]);
    }

    public function deleteAction() {
        header('Content-Type: application/json');

        if (!$this->hasPermission('users', 'd')) {
            echo json_encode(['success' => false, 'message' => '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.']);
            exit(); // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∫—Ä–∏–ø—Ç
        }

        $id = $this->params['id'] ?? 0;
        
        if ($id == $_SESSION['user_id']) {
            echo json_encode(['success' => false, 'message' => '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–º—ñ —Å–µ–±–µ.']);
            exit(); // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∫—Ä–∏–ø—Ç
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–µ—à-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –î–û –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if ($this->mUsers->deleteById((int)$id)) {
            $_SESSION['flash_message'] = ['type' => 'success', 'text' => '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.'];
            echo json_encode(['success' => true]);
            exit(); // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∫—Ä–∏–ø—Ç
        } else {
            // –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–æ, —Ü–µ–π –±–ª–æ–∫ –Ω–µ –º–∞—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ–ª–µ—à-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
            echo json_encode(['success' => false, 'message' => '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.']);
            exit(); // –ó—É–ø–∏–Ω—è—î–º–æ —Å–∫—Ä–∏–ø—Ç
        }
    }
}